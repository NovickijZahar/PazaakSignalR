@page "/chat"
@inject NavigationManager NavigationManager

<h3>Chat Room</h3>

<label for="roomName">Room Name:</label>
<input id="roomName" @bind="roomInput" placeholder="Enter room name" />
<button @onclick="JoinChat">Join Chat</button>

@if (IsConnected)
{
    <InputText @bind-Value="messageInput" placeholder="Enter message" />
    <button @onclick="Send">Send</button>

    <div class="overflow-auto" style="max-height: 300px;">
        <ul id="messageList" class="list-unstyled">
            @foreach (var message in messages)
            {
                <li>@message</li>
            }
        </ul>
    </div>
}
else
{
    <span>Connecting...</span>
}

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string roomInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("https://localhost:7208/chat"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string>("ReceiveMessage", async (message) =>
        {
            messages.Add(message);
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("ChatFull", async (message) =>
        {
            messages.Add(message);
            IsConnected = false; 
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("Joined", (roomName) =>
        {
            messages.Add($"Joined room: {roomName}");
            IsConnected = true;
            InvokeAsync(StateHasChanged);
        });

        try
        {
            await hubConnection.StartAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting connection: {ex.Message}");
        }
    }

    private async Task JoinChat()
    {
        await hubConnection.SendAsync("JoinChat", roomInput);
    }

    private Task Send() => hubConnection.SendAsync("SendMessage", roomInput, messageInput);

    public bool IsConnected { get; set; }
}